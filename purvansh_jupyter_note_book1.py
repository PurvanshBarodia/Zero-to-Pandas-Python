# -*- coding: utf-8 -*-
"""Purvansh_Jupyter_Note_Book1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZW53MK4ISKhwmV8Q7HIM_47mrGbMLWdT
"""

import os
os.makedirs('./data', exist_ok = True)

url1 = 'https://gist.githubusercontent.com/aakashns/257f6e6c8719c17d0e498ea287d1a386/raw/7def9ef4234ddf0bc82f855ad67dac8b971852ef/loans1.txt'
url2 = 'https://gist.githubusercontent.com/aakashns/257f6e6c8719c17d0e498ea287d1a386/raw/7def9ef4234ddf0bc82f855ad67dac8b971852ef/loans2.txt'
url3 = 'https://gist.githubusercontent.com/aakashns/257f6e6c8719c17d0e498ea287d1a386/raw/7def9ef4234ddf0bc82f855ad67dac8b971852ef/loans3.txt'

import urllib.request as url
url.urlretrieve (url1, './data/loans1.txt')

url.urlretrieve (url2, './data/loans2.txt')

url.urlretrieve (url3, './data/loans3.txt')

# Make a Parse_header Funtion:
def parse_header (header_line):
    return header_line.strip().split(',')

# Make a parse_value Function
def parse_value(data_line):
    value =[]
    for item in data_line.strip().split(','):
        if item == '':
            value.append(0.0)
        else:
            value.append(float(item))
    return value

# let's test both function (impovment is needed or not
with open('./data/loans3.txt', 'r') as f3:
    file3 = f3.readlines()
    
# check parse_header:
header =parse_header(file3[0])
print(header)

# check parse_value:
value2 =parse_value(file3[2])
print(value2)

"""Looks like function `parse_header` and `parse_value` running completly well.

Now try to make dict which have header as key and value as value `{header : value}` 
first make only for spaified value of `parse_value` after that you can use `loops`
"""

def dict1(header,value):
    d1 = {}   # declare empty dictonary that will be filled with key-value pair through loop.
    for i,j in zip(header,value):
        d1[i] = j
    return d1

""" First check what functionality `zip` provides:"""

list1 = [1,2,3,4]
list2 = [1,4,9,16]
use_of_zip = zip(list1,list2)
print(use_of_zip)

#check dict1:
dict1(header,value2)

"""Now make a function that make list of all dictionary having `header:value` pair."""

def read_csv(path):
    loan_list =[]
    with open(path,'r') as f:
        fl = f.readlines()
        header = parse_header(fl[0])
        for item in fl[1:]:
            value = parse_value(item)
            dictn = dict1(header,value)
            loan_list.append(dictn)
    return loan_list

""" ### Let's Check our final Function: `read_csv`"""

read_csv('./data/loans1.txt')

"""** It complytly works**"""

# Let's add some documatation
def read_csv(path):
    '''
    Author : `Purvansh`
    
    What it do?
    It read your csv file and convert it into a list of 
    dict.
    
    why it's needed?
    If you want to perform any analysis you should have
    it in form of python datatypes.
    
    Argument:
    Give path of file as it's argument.
    it takes only one argument
    
    
    
    '''
    loan_list =[]
    with open(path,'r') as f:
        fl = f.readlines()
        header = parse_header(fl[0])
        for item in fl[1:]:
            value = parse_value(item)
            dictn = dict1(header,value)
            loan_list.append(dictn)
    return loan_list

help(read_csv)

read_csv('./data/loans2.txt')

read_csv ('./data/loans3.txt')

"""## Now let's convert it into CSV form in which we got."""

def write_in_csv(path1,path2):
    j = read_csv(path1)
    with open(path2,'w') as f2:
        headers = list(j[0].keys())
        f2.write(','.join(headers) +'\n')
        for item in j:
            values =[]
            for header in headers:
                values.append(str(item.get(header,"")))
            f2.write(','.join(values) +'\n')

write_in_csv('./data/loans3.txt','./data/emis3.txt')

with open('./data/emis3.txt','r') as f3:
     line =f3.readlines()
line

j = line[3].strip().split(',')
dict1 = {}
list1 = []
amount =[]
duration = []
rate =[]
down_payment =[]
headers = line[0].strip().split(',')
amount.append(float(j[0]))
duration.append(float(j[1]))
rate.append(float(j[2]))
down_payment.append(float(j[3]))   
list1 = [amount,duration,rate,down_payment]
for header,value in zip(header,list1):
    dict1[header] = value

    
dict1

dict1 = {}
headers = line[0].strip().split(',')
amount =[]
duration = []
rate =[]
down_payment =[]
for i in range (1,len(line)):
    j = line[i].strip().split(',')
    try:
        amount.append(float(j[0]))
    except ValueError:
        amount.append(0.0)
    
    try:    
        duration.append(float(j[1]))
    except ValueEarror:
        duration.append(0.0)
        
    try:    
        rate.append(float(j[2]))
    except ValueEarror:
        rate.append(0.0)
        
    try:
        down_payment.append(float(j[3])) 
    except:
        down_payment.append(0.0)
    list1 = [amount,duration,rate,down_payment]
    for header,value in zip(headers,list1):
        dict1[header] = value
    
dict1

"""# Now this is a complete funtion:

> it hendls messing values also and if you give `readlines()` as input it will give you a dict of where amount,duration are as key and it's values is in list.

### Example:

{'amount': [828400.0, 4633400.0, 42900.0, 983000.0, 15230.0],
 'duration': [120.0, 240.0, 90.0, 16.0, 48.0],
 'rate': [0.11, 0.06, 0.08, 0.14, 0.07],
 'down_payment': [100000.0, 0.0, 8900.0, 0.0, 4300.0]}
"""

headers

